# 在指定文件夹下寻找数据库操作类, 其操作类必须继承基类
from sql_factory import SqliteFactory

# Notice:
# this example need to you create table in your operator class

# assign  sqlite3 database file path
db_file_path = r"C:\Users\Administrator\AppData\Local\Temp\exa_db_name"
db_name = "exa_db"
table_name = "exa_table"

db_factory = SqliteFactory("examples.table_class")

# connection method 1:
db_factory.db(db_name=db_name, db_file=db_file_path)

# connection method 2 :
#        it's similar to create_engine syntax, but add first
#        argument db_name
#
# db_factory.connect(db_name, "sqlite:///" + db_file_path)

# remove file generated by sqlite3
# if os.path.isfile(self.db_temp_file):
#     os.remove(self.db_temp_file)

t = db_factory.db(db_name).table(table_name)
print("table operator class name : " + str(t.__class__))

# t.remove() will remove all records
t.remove()

print("")
print("#### test insert and count ####")

# count the num of records
print("Before insert, record num: " + str(t.count()))
t.insert({"id": 1, "name": "unittest"})
print("After insert, record num: " + str(t.count()))

t.remove({"id": 1, "name": "unittest"})
print("After remove, record num: " + str(t.count()))

print("")
print("#### test get record ####")

t.insert({"id": 1, "name": "unittest"})
res = t.get({"id": 1})
id = res[0]['id']
name = res[0]['name']

print("insert record:  {'id': 1, 'name': 'unittest'}")
print("get record: " + str(res))
print("record id: " + str(id))
print("record name: " + name)

print("")
print("#### test update record ####")

t.update({"id": 1}, {"name": "update"})
res = t.get({"id": 1})
id = res[0]['id']
name = res[0]['name']

print("update record: ")
print("record id: " + str(id))
print("record name: " + name)
