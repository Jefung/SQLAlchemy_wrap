import os
import tempfile
import unittest

from exceptions import *
from sql_factory import SqliteFactory


class TestSqliteFactory(unittest.TestCase):
    temp_dir = tempfile.gettempdir()
    db_name = "unittest"
    db_temp_file = os.path.join(temp_dir, db_name)

    def test_connect_db(self):
        db_factory = SqliteFactory()
        self.assertRaises(DbNotConnect, db_factory.db, self.db_name)

        # connection method 1:
        db_factory.db(self.db_name, self.db_temp_file)
        db_factory.db(self.db_name).close()

        # connection method 2 :
        #        it's similar to create_engine syntax, but add first
        #        argument db_name
        db_factory.connect(self.db_name, "sqlite:///" + self.db_temp_file)
        db_factory.db(self.db_name).close()

        # remove file generated by sqlite3
        if os.path.isfile(self.db_temp_file):
            os.remove(self.db_temp_file)

    def test_user_table_class(self):
        db_factory = SqliteFactory("table_class")

        t = db_factory.db(self.db_name, self.db_temp_file).table("unittest_table")

        # test count
        self.assertIsInstance(t.count(), int)

        # test insert and remove
        t.remove()
        count = t.count()
        t.insert({"id": 1, "name": "unittest"})
        self.assertEqual(count + 1, t.count())
        t.remove()
        self.assertEqual(0, t.count())

        # test get and get_all
        t.insert({"id": 1, "name": "unittest"})
        self.assertIsInstance(t.get({"id": 1}), list)
        self.assertEqual(t.get({"id": 1})[0]["name"], "unittest")

        t.insert({"id": 2, "name": "unittest"})
        self.assertEqual(2, len(t.get_all()))
        t.remove()

        # test update
        t.insert({"id": 1, "name": "unittest"})
        self.assertEqual(t.get({"id": 1})[0]["name"], "unittest")
        t.update({"id": 1}, {"name": "update"})
        self.assertEqual(t.get({"id": 1})[0]["name"], "update")
        t.remove()


if __name__ == '__main__':
    unittest.main()
