import os
import tempfile
import unittest

from exceptions import *
from sql_factory import SqliteFactory


class TestSqliteFactory(unittest.TestCase):
    temp_dir = tempfile.gettempdir()
    db_name = "unittest"
    db_temp_file = os.path.join(temp_dir, db_name)

    def setUp(self):
        self.db_factory = SqliteFactory("tests.table_class")
        self.t = self.db_factory.db(self.db_name, self.db_temp_file).table("UnittestTable")
        self.t.remove()

    def tearDown(self):
        self.t.remove()
        self.db_factory.close()
        self.db_factory = None
        import time

    def test_connect_db(self):
        db_factory = SqliteFactory()
        self.assertRaises(DbNotConnect, db_factory.db, self.db_name)

        # connection method 1:
        db_factory.db(self.db_name, self.db_temp_file)
        db_factory.db(self.db_name).close()

        # connection method 2 :
        #        it's similar to create_engine syntax, but add first
        #        argument db_name
        db_factory.connect(self.db_name, "sqlite:///" + self.db_temp_file)
        db_factory.db(self.db_name).close()

        # remove file generated by sqlite3
        # if os.path.isfile(self.db_temp_file):
        # os.remove(self.db_temp_file)

    def test_user_table_class(self):
        # db_factory = SqliteFactory("tests.table_class")

        # use table operator class that create table and use it
        # t = db_factory.db(self.db_name, self.db_temp_file).table("UnittestTable")
        self.assertIsInstance(self.t.count(), int)

        # use table class reflected table that exists in database
        t2 = self.db_factory.db(self.db_name, self.db_temp_file).table("UseExistsTable")
        self.assertIsInstance(t2.count(), int)

        # use BaseTable when can't find operator class
        db_factory = SqliteFactory("")
        t3 = db_factory.db(self.db_name, self.db_temp_file).table("UnittestTable")
        self.assertIsInstance(t3.count(), int)

    def test_insert(self):
        self.t.insert({"id": 1, "name": "test_insert"})
        self.t.insert_one({"id": 2, "name": "test_insert_one"})
        self.t.insert_multi([
            {"id": 3, "name": "test_insert_multi_1"},
            {"id": 4, "name": "test_insert_multi_2"}
        ]
        )
        self.assertEqual(self.t.count(), 4)
        result = self.t.exec_sql("select * from UnittestTable")
        # todo: result.rowcount == -1 ?
        # self.assertEqual(result.rowcount,4)

    def test_exec_sql(self):
        db_factory = SqliteFactory("tests.table_class")

        # use table operator class that create table and use it
        t = db_factory.db(self.db_name, self.db_temp_file).table("UnittestTable")
        self.t.remove()
        res = self.t.exec_sql("select count(*) from UnittestTable")
        self.assertEqual(res.scalar(), 0)

        self.t.exec_sql("insert into UnittestTable ('name') values ('jefung')")
        res = self.t.exec_sql("select count(*) from UnittestTable")
        self.assertEqual(res.scalar(), 1)

        self.t.exec_sql("delete from UnittestTable")
        res = self.t.exec_sql("select count(*) from UnittestTable")
        self.assertEqual(res.scalar(), 0)

        # remove file generated by sqlite3
        # if os.path.isfile(self.db_temp_file):
        #     os.remove(self.db_temp_file)

    def test_delete(self):
        self.t.insert_one({"name": "unittest"})
        self.assertEqual(self.t.count(), 1)

        self.assertEqual(self.t.remove("name='not_exists'"), 0)
        self.assertEqual(self.t.count(), 1)

        self.assertEqual(self.t.remove("name='unittest'"), 1)
        self.assertEqual(self.t.count(), 0)

    def test_get(self):
        self.t.insert_one({"name": "unittest"})
        self.assertEqual(self.t.get()[0]["name"], "unittest")

        self.t.insert_one({"name": "unittest_2"})
        self.assertEqual(len(self.t.get()), 2)
        self.assertEqual(self.t.get("name='unittest_2'")[0]["name"], "unittest_2")

    def test_update(self):
        self.t.insert_one({"name": "unittest"})

        self.t.update({"name": "unittest_update"}, "name=:_name", _name="unittest")
        self.assertEqual(self.t.get("name='unittest_update'")[0]["name"], "unittest_update")


if __name__ == '__main__':
    unittest.main()
